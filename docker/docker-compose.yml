services:
  web:
    build:
      context: /opt/ralph/source
      dockerfile: docker/prod-new.Dockerfile
    restart: always
    expose:
      - "8000"
    volumes:
      - ralph_media:/var/local/ralph/media
      - ralph_static:/usr/share/ralph/static
    environment:
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      CHATBOT_ENABLED: "true"
      CHATBOT_URL: "http://chatbot:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  chatbot:
    image: tortiz7/ralph_chatbot_v2
    runtime: nvidia
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./model:/app/model
    environment:
      RALPH_API_URL: "http://web:8000/api"
      RALPH_API_TOKEN: "${RALPH_API_TOKEN}"
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      NVIDIA_VISIBLE_DEVICES: all
      CUDA_VISIBLE_DEVICES: "0"
    depends_on:
      - web
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  nginx:
    build:
      context: /opt/ralph/source
      dockerfile: docker/nginx.Dockerfile
    restart: always
    ports:
      - "80:80"
    volumes:
      - ralph_media:/opt/media
      - ralph_static:/opt/static
    environment:
      DJANGO_DEBUG: "false"
      DJANGO_SETTINGS_MODULE: "ralph.settings.prod"
    depends_on:
      web:
        condition: service_healthy
      chatbot:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  inkpy:
    platform: linux/amd64
    image: allegro/inkpy:latest
    restart: always
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PASSWORD: ""
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: 0

volumes:
  ralph_media:
  ralph_static: